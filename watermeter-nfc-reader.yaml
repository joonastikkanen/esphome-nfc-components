esphome:
  name: watermeter-nfc-reader
  friendly_name: Watermeter NFC Reader

external_components:
  - source:
      type: git
      url: https://github.com/joonastikkanen/esphome-nfc-components.git
      ref: main
      path: components
    components: [ nfc, pn532_i2c, pn532 ]
    refresh: 0s

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Watermeter-Nfc-Reader"
    password: "wmtFnzXpI5Jf"

captive_portal:

web_server:

# Enable logging
logger:
  level: DEBUG
  logs:
    lambda: DEBUG  
    custom: DEBUG  
    nfc: DEBUG
    pn532_i2c: DEBUG
    pn532: DEBUG
    i2c: DEBUG

i2c:
  - id: bus_a
    sda: GPIO6
    scl: GPIO7
    scan: True

time:
  - platform: sntp
    id: sntp_time
    servers:
      - 0.fi.pool.ntp.org
      - 1.fi.pool.ntp.org
      - 2-fi.pool.ntp.org

debug:
  update_interval: 30s

button:
  - platform: restart
    name: Restart

sensor:
  - platform: uptime
    name: Uptime
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "Device WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "Device WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  - platform: template
    name: "Water Volume"
    id: water_volume
    unit_of_measurement: "m続"
    device_class: "water"
    state_class: "total_increasing"
    accuracy_decimals: 3
    icon: mdi:water

text_sensor:
  - platform: debug
    reset_reason:
      name: Reset Reason
  - platform: template
    name: "Water Meter NFC Data"
    id: water_meter_json
    icon: mdi:water

pn532_i2c:
  id: i_pn532
  update_interval: 30s
  on_tag:
    then:
      - lambda: |-
          std::string payload1 = "";
          auto nfckey = tag.get_tag_type();
          if (!tag.has_ndef_message()) return;

          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          std::string input = records[0]->get_payload();

          if (input != "") {
            std::string gjson = "";
            std::string ajson = "";
            std::string hjson = "\"history\": [";
            std::string iname = "";
            std::string isn = "";
            std::string vol_value = "";
            std::string line = "";
            size_t delimiter = 0;

            size_t crc_pos = input.find("CRC");
            if (crc_pos != std::string::npos) input = input.substr(0, crc_pos);

            size_t pos = 0;
            bool is_first_line = true;
            while ((pos = input.find("\r\n")) != std::string::npos) {
              line = input.substr(0, pos);
              input.erase(0, pos + 2);

              if (is_first_line) {
                is_first_line = false;
                gjson += std::string("\"") + "Name" + "\": \"" + line + "\",";
                continue;
              }

              delimiter = line.find(':');
              if (delimiter != std::string::npos) {
                std::string key = line.substr(0, delimiter);
                std::string value = line.substr(delimiter + 1);

                key.erase(0, key.find_first_not_of(" \t"));
                key.erase(key.find_last_not_of(" \t") + 1);
                value.erase(0, value.find_first_not_of(" \t"));
                value.erase(value.find_last_not_of(" \t") + 1);

                if (key.length() == 10 && key[4] == '-' && key[7] == '-') {
                  hjson += "{\"date\": \"" + key + "\", \"volume\": \"" + value + "\"},";
                } else if (key == "Vol" || key == "Temp" || key == "FVol" || key == "RVol" || key == "KVol" || key == "KDate" || key == "Time") {
                  ajson += "\"" + key + "\": \"" + value + "\",";
                  if (key == "Vol") {
                    vol_value = value;
                  }
                } else if (key == "S/N") {
                  gjson += "\"SN\": \"" + value + "\",";
                  gjson += "\"NFC_Id\": \"" + value + "\",";
                  gjson += "\"NFC_Typ\": \"" + nfckey + "\",";
                  isn = value;
                } else if (key == "Battery") {
                  gjson += "\"Battery\": \"" + value + "\",";
                }
              }
            }

            if (hjson.back() == ',') hjson.pop_back();
            gjson = "{" + gjson + ajson + hjson + "]}";

            std::string iconv = isn;
            isn = "";
            for (char c : iconv) {
              if (c >= 'A' && c <= 'Z') {
                isn += c + ('a' - 'A');
              } else {
                isn += c;
              }
            }

            ESP_LOGD("lambda", "S/N (klein): %s", isn.c_str());
            ESP_LOGD("lambda", "JSON-String: %s", gjson.c_str());

            id(water_meter_json).publish_state(gjson);
            
            // Extract and publish volume value
            if (!vol_value.empty()) {
              // Remove unit (m続) if present and convert to float
              std::string vol_numeric = vol_value;
              size_t unit_pos = vol_numeric.find(" m続");
              if (unit_pos != std::string::npos) {
                vol_numeric = vol_numeric.substr(0, unit_pos);
              }
              
              // Simple string to float conversion without exceptions
              char* endptr;
              float volume_float = strtof(vol_numeric.c_str(), &endptr);
              
              // Check if conversion was successful
              if (endptr != vol_numeric.c_str() && *endptr == '\0') {
                id(water_volume).publish_state(volume_float);
                ESP_LOGD("lambda", "Volume: %.3f m続", volume_float);
              } else {
                ESP_LOGW("lambda", "Failed to parse volume: %s", vol_value.c_str());
              }
            }
          }
          delay(500);